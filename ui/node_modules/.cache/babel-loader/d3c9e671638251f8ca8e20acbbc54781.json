{"ast":null,"code":"'use strict';\n\nvar _util = require('util');\n\nvar _lruCache = require('lru-cache');\n\nvar _lruCache2 = _interopRequireDefault(_lruCache);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar WHITESPACE_X = /\\s+/g;\n\nfunction vaccuum(string) {\n  return string.replace(WHITESPACE_X, '');\n}\n\nfunction hash(object) {\n  return vaccuum((0, _util.inspect)(object, {\n    depth: Infinity,\n    showHidden: true\n  }));\n}\n\nvar cache = (0, _lruCache2.default)(100);\n\nfunction validate(anArrayOfKeys) {\n  var moduleOutputPrefix = '[keykey]';\n\n  if (!Array.isArray(anArrayOfKeys)) {\n    throw new TypeError(moduleOutputPrefix + ' Must call with an array.');\n  }\n}\n\nfunction reduce(anArrayOfKeys, each) {\n  var subObject = {};\n  anArrayOfKeys.forEach(each.bind(each, subObject, anArrayOfKeys));\n  return subObject;\n}\n\nfunction set(anArrayOfKeys) {\n  var key = hash(anArrayOfKeys);\n  return cache.set(key, anArrayOfKeys);\n}\n\nfunction create(anArrayOfKeys, bypassCache) {\n  validate(anArrayOfKeys);\n  var creation = reduce(anArrayOfKeys, function (result, _, key) {\n    result[key] = key;\n  });\n  !bypassCache && set(creation);\n  return creation;\n}\n\nfunction get(anArrayOfKeys) {\n  return cache.get(hash(anArrayOfKeys)) || create(anArrayOfKeys);\n}\n\nfunction isUndef(o) {\n  return typeof o === 'undefined';\n}\n\nfunction isBool(o) {\n  return typeof o === 'boolean';\n}\n\nfunction last(a) {\n  return a[a.length - 1];\n}\n\nfunction notUndefOrBool(o) {\n  return !isUndef(o) && !isBool(o);\n}\n\nfunction KeyKey(anArrayOfKeys, bypassCache) {\n  // Allow non-array input while maintaining cache decision-point\n  if (notUndefOrBool(bypassCache)) {\n    anArrayOfKeys = [].slice.call(arguments);\n    var lastKey = last(anArrayOfKeys);\n\n    if (isBool(lastKey)) {\n      bypassCache = lastKey;\n      anArrayOfKeys.pop();\n    } else {\n      bypassCache = false;\n    }\n  }\n\n  return bypassCache ? create(anArrayOfKeys, bypassCache) : get(anArrayOfKeys);\n}\n\nmodule.exports = KeyKey;\n\nmodule.exports.reset = function () {\n  return cache.reset();\n};\n\nmodule.exports.resetCache = module.exports.reset;\n\nmodule.exports.cacheKeys = function () {\n  return cache.keys();\n};\n\nmodule.exports.cacheValues = function () {\n  return cache.values();\n};","map":null,"metadata":{},"sourceType":"script"}