{"ast":null,"code":"import _toConsumableArray from \"/Users/pesiakovitz/goApps/src/restaurants/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/pesiakovitz/goApps/src/restaurants/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { combineReducers, applyMiddleware, createStore } from 'redux'; // import { setAxiosConfig, reducer as restaurants } from 'redux-json-api';\n\nimport thunk from 'redux-thunk';\n\nfunction visibilityFilter() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '*';\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'SET_VISIBILITY_FILTER':\n      return action.filter;\n\n    default:\n      return state;\n  }\n}\n\nfunction current() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'SET_CURRENT':\n      return action.data.restaurant;\n\n    case 'RESET_CURRENT':\n      return null;\n\n    case 'CHANGE_CURRENT':\n      return _objectSpread({}, state, action.data);\n\n    default:\n      return state;\n  }\n}\n\nfunction restaurants() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'DELETE':\n      return state.filter(function (r) {\n        return r.Id !== action.data.Id;\n      });\n\n    case 'UPDATE':\n      return state.map(function (r) {\n        return r.Id === action.data.restaurant.Id ? action.data.restaurant : r;\n      });\n\n    case 'UPLOAD':\n      return state.push.apply(state, _toConsumableArray(action.restaurants));\n\n    case 'LOAD':\n      return action.data;\n\n    default:\n      return state;\n  }\n}\n\nvar reducer = combineReducers({\n  visibilityFilter: visibilityFilter,\n  current: current,\n  restaurants: restaurants\n});\nvar store = createStore(reducer, applyMiddleware(thunk));\nexport default store;","map":{"version":3,"sources":["/Users/pesiakovitz/goApps/src/restaurants/ui/src/reducers/store.js"],"names":["combineReducers","applyMiddleware","createStore","thunk","visibilityFilter","state","action","type","filter","current","data","restaurant","restaurants","r","Id","map","push","reducer","store"],"mappings":";;AAAA,SAASA,eAAT,EAA0BC,eAA1B,EAA2CC,WAA3C,QAA8D,OAA9D,C,CACA;;AACA,OAAOC,KAAP,MAAkB,aAAlB;;AAEA,SAASC,gBAAT,GAA+C;AAAA,MAArBC,KAAqB,uEAAb,GAAa;AAAA,MAARC,MAAQ;;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,uBAAL;AACE,aAAOD,MAAM,CAACE,MAAd;;AACF;AACE,aAAOH,KAAP;AAJJ;AAMD;;AAED,SAASI,OAAT,GAAuC;AAAA,MAAtBJ,KAAsB,uEAAd,IAAc;AAAA,MAARC,MAAQ;;AACrC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,aAAL;AACE,aAAOD,MAAM,CAACI,IAAP,CAAYC,UAAnB;;AACF,SAAK,eAAL;AACE,aAAO,IAAP;;AACF,SAAK,gBAAL;AACE,+BAAYN,KAAZ,EAAsBC,MAAM,CAACI,IAA7B;;AACF;AACE,aAAOL,KAAP;AARJ;AAUD;;AAED,SAASO,WAAT,GAAyC;AAAA,MAApBP,KAAoB,uEAAZ,EAAY;AAAA,MAARC,MAAQ;;AACvC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,QAAL;AACE,aAAOF,KAAK,CAACG,MAAN,CAAa,UAAAK,CAAC;AAAA,eAAIA,CAAC,CAACC,EAAF,KAASR,MAAM,CAACI,IAAP,CAAYI,EAAzB;AAAA,OAAd,CAAP;;AACF,SAAK,QAAL;AACE,aAAOT,KAAK,CAACU,GAAN,CAAU,UAACF,CAAD;AAAA,eAAOA,CAAC,CAACC,EAAF,KAASR,MAAM,CAACI,IAAP,CAAYC,UAAZ,CAAuBG,EAAhC,GAAqCR,MAAM,CAACI,IAAP,CAAYC,UAAjD,GAA8DE,CAArE;AAAA,OAAV,CAAP;;AACF,SAAK,QAAL;AACE,aAAOR,KAAK,CAACW,IAAN,OAAAX,KAAK,qBAASC,MAAM,CAACM,WAAhB,EAAZ;;AACA,SAAK,MAAL;AACE,aAAON,MAAM,CAACI,IAAd;;AACJ;AACE,aAAOL,KAAP;AAVJ;AAYD;;AAED,IAAMY,OAAO,GAAGjB,eAAe,CAAC;AAAEI,EAAAA,gBAAgB,EAAhBA,gBAAF;AAAoBK,EAAAA,OAAO,EAAPA,OAApB;AAA6BG,EAAAA,WAAW,EAAXA;AAA7B,CAAD,CAA/B;AACA,IAAMM,KAAK,GAAGhB,WAAW,CAACe,OAAD,EAAUhB,eAAe,CAACE,KAAD,CAAzB,CAAzB;AAEA,eAAee,KAAf","sourcesContent":["import { combineReducers, applyMiddleware, createStore } from 'redux'\n// import { setAxiosConfig, reducer as restaurants } from 'redux-json-api';\nimport thunk from 'redux-thunk';\n\nfunction visibilityFilter(state = '*', action) {\n  switch (action.type) {\n    case 'SET_VISIBILITY_FILTER':\n      return action.filter\n    default:\n      return state\n  }\n}\n\nfunction current(state = null, action) {\n  switch (action.type) {\n    case 'SET_CURRENT':\n      return action.data.restaurant;\n    case 'RESET_CURRENT':\n      return null;\n    case 'CHANGE_CURRENT':\n      return { ...state, ...action.data }\n    default:\n      return state\n  }\n}\n\nfunction restaurants(state = [], action) {\n  switch (action.type) {\n    case 'DELETE':\n      return state.filter(r => r.Id !== action.data.Id);\n    case 'UPDATE':\n      return state.map((r) => r.Id === action.data.restaurant.Id ? action.data.restaurant : r);\n    case 'UPLOAD':\n      return state.push(...action.restaurants);\n      case 'LOAD':\n        return action.data;\n    default:\n      return state\n  }\n}\n\nconst reducer = combineReducers({ visibilityFilter, current, restaurants })\nconst store = createStore(reducer, applyMiddleware(thunk))\n\nexport default store"]},"metadata":{},"sourceType":"module"}