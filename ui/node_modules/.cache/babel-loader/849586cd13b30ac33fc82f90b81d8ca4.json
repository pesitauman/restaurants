{"ast":null,"code":"import _classCallCheck from \"/Users/pesiakovitz/goApps/src/restaurants/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pesiakovitz/goApps/src/restaurants/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/pesiakovitz/goApps/src/restaurants/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/pesiakovitz/goApps/src/restaurants/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/pesiakovitz/goApps/src/restaurants/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/pesiakovitz/goApps/src/restaurants/ui/src/components/location.js\";\nimport React from 'react';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\n\nvar LocationSearchInput =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(LocationSearchInput, _React$Component);\n\n  function LocationSearchInput(_props) {\n    var _this;\n\n    _classCallCheck(this, LocationSearchInput);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LocationSearchInput).call(this, _props));\n\n    _this.locationToAddress = function (location) {\n      var geocoder = new google.maps.Geocoder();\n      var latlngStr = props.location.split(',', 2);\n      var latlng = {\n        lat: parseFloat(latlngStr[0]),\n        lng: parseFloat(latlngStr[1])\n      };\n      return new Promise(function (resolve, reject) {\n        geocoder.geocode({\n          'location': latlng\n        }, function (results, status) {\n          if (status === 'OK') {\n            resolve(results[0].formatted_address);\n          } else {\n            reject(new Error(\"Couldn't find the location for \".concat(props.location)));\n          }\n        });\n      }); // return new Promise(function(resolve, reject) {\n      // geocoder.geocode({'location': latlng}, function(r){console.log(r[0])})\n    };\n\n    _this.handleChange = function (address) {\n      console.log('adress:', address);\n\n      _this.setState({\n        address: address\n      });\n    };\n\n    _this.handleSelect = function (address) {\n      geocodeByAddress(address).then(function (results) {\n        return getLatLng(results[0]);\n      }).then(function (latLng) {\n        return _this.props.onLocationSelect(latLng);\n      });\n    };\n\n    _this.state = {\n      address: ''\n    };\n    return _this;\n  }\n\n  _createClass(LocationSearchInput, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      locationToAddress(this.props.location).then(function (address) {\n        return _this2.setState({\n          adress: adress\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(PlacesAutocomplete, {\n        value: this.props.address,\n        onChange: this.handleChange,\n        onSelect: this.props.handleSelect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, function (_ref) {\n        var getInputProps = _ref.getInputProps,\n            suggestions = _ref.suggestions,\n            getSuggestionItemProps = _ref.getSuggestionItemProps,\n            loading = _ref.loading;\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }, React.createElement(\"input\", Object.assign({}, getInputProps({\n          placeholder: 'Search Places ...',\n          className: 'location-search-input'\n        }), {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"autocomplete-dropdown-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }, loading && React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }, \"Loading...\"), suggestions.map(function (suggestion) {\n          var className = suggestion.active ? 'suggestion-item--active' : 'suggestion-item'; // inline style for demonstration purpose\n\n          var style = suggestion.active ? {\n            backgroundColor: '#fafafa',\n            cursor: 'pointer'\n          } : {\n            backgroundColor: '#ffffff',\n            cursor: 'pointer'\n          };\n          return React.createElement(\"div\", Object.assign({}, getSuggestionItemProps(suggestion, {\n            className: className,\n            style: style\n          }), {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 74\n            },\n            __self: this\n          }), React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 80\n            },\n            __self: this\n          }, suggestion.description));\n        })));\n      });\n    }\n  }]);\n\n  return LocationSearchInput;\n}(React.Component);\n\nexport default LocationSearchInput;","map":{"version":3,"sources":["/Users/pesiakovitz/goApps/src/restaurants/ui/src/components/location.js"],"names":["React","PlacesAutocomplete","geocodeByAddress","getLatLng","LocationSearchInput","props","locationToAddress","location","geocoder","google","maps","Geocoder","latlngStr","split","latlng","lat","parseFloat","lng","Promise","resolve","reject","geocode","results","status","formatted_address","Error","handleChange","address","console","log","setState","handleSelect","then","latLng","onLocationSelect","state","adress","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","className","map","suggestion","active","style","backgroundColor","cursor","description","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from 'react-places-autocomplete';\n \nclass LocationSearchInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { address: '' };\n  }\n\n  componentDidMount() {\n    locationToAddress(this.props.location)\n    .then((address) => this.setState({ adress }));\n  }\n\n  locationToAddress = (location) => {\n    const geocoder = new google.maps.Geocoder();\n    const latlngStr = props.location.split(',', 2);\n    const latlng = {lat: parseFloat(latlngStr[0]), lng: parseFloat(latlngStr[1])};\n    return new Promise(function(resolve, reject) {\n      geocoder.geocode({'location': latlng}, function(results, status) {\n          if (status === 'OK') {\n              resolve(results[0].formatted_address);\n          } else {\n              reject(new Error(`Couldn't find the location for ${props.location}`));\n          }\n      })\n    })\n\n\n    // return new Promise(function(resolve, reject) {\n    // geocoder.geocode({'location': latlng}, function(r){console.log(r[0])})\n  }\n \n  handleChange = address => {\n    console.log('adress:', address);\n    this.setState({ address });\n  };\n \n  handleSelect = address => {\n    geocodeByAddress(address)\n      .then(results => getLatLng(results[0]))\n      .then(latLng => this.props.onLocationSelect(latLng))\n  };\n \n  render() {\n    return (\n      <PlacesAutocomplete\n        value={this.props.address}\n        onChange={this.handleChange}\n        onSelect={this.props. handleSelect}\n      >\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n          <div>\n            <input\n              {...getInputProps({\n                placeholder: 'Search Places ...',\n                className: 'location-search-input',\n              })}\n            />\n            <div className=\"autocomplete-dropdown-container\">\n              {loading && <div>Loading...</div>}\n              {suggestions.map(suggestion => {\n                const className = suggestion.active\n                  ? 'suggestion-item--active'\n                  : 'suggestion-item';\n                // inline style for demonstration purpose\n                const style = suggestion.active\n                  ? { backgroundColor: '#fafafa', cursor: 'pointer' }\n                  : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                return (\n                  <div\n                    {...getSuggestionItemProps(suggestion, {\n                      className,\n                      style,\n                    })}\n                  >\n                    <span>{suggestion.description}</span>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </PlacesAutocomplete>\n    );\n  }\n}\n\nexport default LocationSearchInput;"]},"metadata":{},"sourceType":"module"}