{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ensureResourceTypeInState = exports.setIsInvalidatingForExistingResource = exports.updateOrInsertResourcesIntoState = exports.removeResourceFromState = exports.updateOrInsertResource = exports.addLinksToState = exports.makeUpdateReverseRelationship = undefined;\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _objectPathImmutable = require('object-path-immutable');\n\nvar _objectPathImmutable2 = _interopRequireDefault(_objectPathImmutable);\n\nvar _pluralize = require('pluralize');\n\nvar _pluralize2 = _interopRequireDefault(_pluralize);\n\nvar _utils = require('./utils');\n\nvar _deepEqual = require('deep-equal');\n\nvar _deepEqual2 = _interopRequireDefault(_deepEqual);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar makeUpdateReverseRelationship = exports.makeUpdateReverseRelationship = function makeUpdateReverseRelationship(resource, relationship) {\n  var newRelation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    type: resource.type,\n    id: resource.id\n  };\n  return function (foreignResources) {\n    var idx = foreignResources.findIndex(function (item) {\n      return item.id === relationship.data.id;\n    });\n\n    if (idx === -1) {\n      return foreignResources;\n    }\n\n    var _map = [1, 2].map(function (i) {\n      return (0, _pluralize2.default)(resource.type, i);\n    }),\n        _map2 = (0, _slicedToArray3.default)(_map, 2),\n        singular = _map2[0],\n        plural = _map2[1];\n\n    var relCase = [singular, plural].find(function (r) {\n      return (0, _utils.hasOwnProperties)(foreignResources[idx], ['relationships', r]);\n    });\n\n    if (!relCase) {\n      return foreignResources;\n    }\n\n    var relPath = ['relationships', relCase, 'data'];\n    var idxRelPath = [idx].concat(relPath);\n    var immutableForeingResources = (0, _objectPathImmutable2.default)(foreignResources);\n\n    if (!(0, _utils.hasOwnProperties)(foreignResources[idx], relPath)) {\n      return immutableForeingResources.push(idxRelPath, newRelation).value();\n    }\n\n    var foreignResourceRel = foreignResources[idx].relationships[relCase].data;\n\n    if (newRelation && Array.isArray(foreignResourceRel) && ~foreignResourceRel.findIndex(function (rel) {\n      return rel.id === newRelation.id && rel.type === newRelation.type;\n    }) || newRelation && foreignResourceRel && foreignResourceRel.id === newRelation.id && foreignResourceRel.type === newRelation.type) {\n      return foreignResources;\n    } else if (Array.isArray(foreignResourceRel) && !newRelation) {\n      var relIdx = foreignResourceRel.findIndex(function (item) {\n        return item.id === resource.id;\n      });\n\n      if (foreignResourceRel[relIdx]) {\n        var deletePath = [idx, 'relationships', singular, 'data', relIdx];\n        return (0, _objectPathImmutable2.default)(foreignResources).del(deletePath).value();\n      }\n\n      return foreignResources;\n    }\n\n    if (relCase === singular) {\n      return immutableForeingResources.set(idxRelPath, newRelation).value();\n    }\n\n    return immutableForeingResources.push(idxRelPath, newRelation).value();\n  };\n};\n\nvar stateContainsResource = function stateContainsResource(state, resource) {\n  var updatePath = [resource.type, 'data'];\n\n  if ((0, _utils.hasOwnProperties)(state, updatePath)) {\n    return state[resource.type].data.findIndex(function (item) {\n      return item.id === resource.id;\n    }) > -1;\n  }\n\n  return false;\n};\n\nvar addLinksToState = exports.addLinksToState = function addLinksToState(state, links, options) {\n  if (options === undefined || options.indexLinks === undefined) {\n    return state;\n  }\n\n  var indexLinkName = options.indexLinks;\n\n  var newState = _objectPathImmutable2.default.set(state, 'links.' + indexLinkName, links);\n\n  return newState;\n};\n\nvar updateOrInsertResource = exports.updateOrInsertResource = function updateOrInsertResource(state, resource) {\n  if ((typeof resource === 'undefined' ? 'undefined' : (0, _typeof3.default)(resource)) !== 'object') {\n    return state;\n  }\n\n  var newState = state;\n  var updatePath = [resource.type, 'data'];\n\n  if (stateContainsResource(state, resource)) {\n    var resources = state[resource.type].data;\n    var idx = resources.findIndex(function (item) {\n      return item.id === resource.id;\n    });\n    var relationships = {};\n\n    for (var relationship in resources[idx].relationships) {\n      if (!(0, _utils.hasOwnProperties)(resource, ['relationships', relationship, 'data'])) {\n        relationships[relationship] = resources[idx].relationships[relationship];\n      }\n    }\n\n    if (!resource.hasOwnProperty('relationships')) {\n      (0, _assign2.default)(resource, {\n        relationships: relationships\n      });\n    } else {\n      (0, _assign2.default)(resource.relationships, relationships);\n    }\n\n    if (!(0, _deepEqual2.default)(resources[idx], resource)) {\n      newState = _objectPathImmutable2.default.set(newState, updatePath.concat(idx), resource);\n    }\n  } else {\n    newState = _objectPathImmutable2.default.push(newState, updatePath, resource);\n  }\n\n  var rels = resource.relationships;\n\n  if (!rels) {\n    return newState;\n  }\n\n  (0, _keys2.default)(rels).forEach(function (relKey) {\n    if (!(0, _utils.hasOwnProperties)(rels[relKey], ['data', 'type'])) {\n      return;\n    }\n\n    var entityPath = [rels[relKey].data.type, 'data'];\n\n    if (!(0, _utils.hasOwnProperties)(newState, entityPath)) {\n      return;\n    }\n\n    var updateReverseRelationship = makeUpdateReverseRelationship(resource, rels[relKey]);\n    newState = _objectPathImmutable2.default.set(newState, entityPath, updateReverseRelationship(newState[rels[relKey].data.type].data));\n  });\n  return newState;\n};\n\nvar removeResourceFromState = exports.removeResourceFromState = function removeResourceFromState(state, resource) {\n  var index = state[resource.type].data.findIndex(function (e) {\n    return e.id === resource.id;\n  });\n  var path = [resource.type, 'data', index];\n  var entityRelationships = resource.relationships || {};\n  return (0, _keys2.default)(entityRelationships).reduce(function (newState, key) {\n    if (!resource.relationships[key].data) {\n      return newState;\n    }\n\n    var entityPath = [resource.relationships[key].data.type, 'data'];\n\n    if ((0, _utils.hasOwnProperties)(state, entityPath)) {\n      var updateReverseRelationship = makeUpdateReverseRelationship(resource, resource.relationships[key], null);\n      return newState.set(entityPath, updateReverseRelationship(state[resource.relationships[key].data.type].data));\n    }\n\n    return newState;\n  }, (0, _objectPathImmutable2.default)(state).del(path));\n};\n\nvar updateOrInsertResourcesIntoState = exports.updateOrInsertResourcesIntoState = function updateOrInsertResourcesIntoState(state, resources) {\n  return resources.reduce(updateOrInsertResource, state);\n};\n\nvar setIsInvalidatingForExistingResource = exports.setIsInvalidatingForExistingResource = function setIsInvalidatingForExistingResource(state, _ref) {\n  var type = _ref.type,\n      id = _ref.id;\n  var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var idx = state[type].data.findIndex(function (e) {\n    return e.id === id && e.type === type;\n  });\n  var updatePath = [type, 'data', idx, 'isInvalidating'];\n  return value === null ? (0, _objectPathImmutable2.default)(state).del(updatePath) : (0, _objectPathImmutable2.default)(state).set(updatePath, value);\n};\n\nvar ensureResourceTypeInState = exports.ensureResourceTypeInState = function ensureResourceTypeInState(state, type) {\n  var path = [type, 'data'];\n  return (0, _utils.hasOwnProperties)(state, [type]) ? state : (0, _objectPathImmutable2.default)(state).set(path, []).value();\n};","map":null,"metadata":{},"sourceType":"script"}