{"ast":null,"code":"import _slicedToArray from \"/Users/pesiakovitz/goApps/src/restaurants/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/pesiakovitz/goApps/src/restaurants/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/pesiakovitz/goApps/src/restaurants/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/Users/pesiakovitz/goApps/src/restaurants/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { geocodeByAddress, getLatLng } from 'react-places-autocomplete'; // const {google} = require('googleapis');\n\nimport geocode from 'react-geocode';\nexport function parseData(_x) {\n  return _parseData.apply(this, arguments);\n}\n\nfunction _parseData() {\n  _parseData = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(data) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", Promise.all(data.map(\n            /*#__PURE__*/\n            function () {\n              var _ref = _asyncToGenerator(\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee(restaurent) {\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.t0 = _objectSpread;\n                        _context.t1 = {};\n                        _context.t2 = restaurent;\n                        _context.next = 5;\n                        return locationToAddress(restaurent.Location);\n\n                      case 5:\n                        _context.t3 = _context.sent;\n                        _context.t4 = {\n                          address: _context.t3\n                        };\n                        return _context.abrupt(\"return\", (0, _context.t0)(_context.t1, _context.t2, _context.t4));\n\n                      case 8:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function (_x4) {\n                return _ref.apply(this, arguments);\n              };\n            }())));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _parseData.apply(this, arguments);\n}\n\nexport function locationToAddress(_x2) {\n  return _locationToAddress.apply(this, arguments);\n}\n\nfunction _locationToAddress() {\n  _locationToAddress = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(location) {\n    var _location$split, _location$split2, lat, lng, response;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", location);\n\n          case 5:\n            response = _context3.sent;\n            return _context3.abrupt(\"return\", response.results[0].formatted_address);\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _locationToAddress.apply(this, arguments);\n}\n\nexport function addressToLatLng(_x3) {\n  return _addressToLatLng.apply(this, arguments);\n}\n\nfunction _addressToLatLng() {\n  _addressToLatLng = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4(address) {\n    var results, latLng;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return geocodeByAddress(address);\n\n          case 2:\n            results = _context4.sent;\n            _context4.next = 5;\n            return getLatLng(results[0]);\n\n          case 5:\n            latLng = _context4.sent;\n            console.log('important:', latLng);\n            return _context4.abrupt(\"return\", \"\".concat(latLng.lat, \"/\").concat(latLng.lng));\n\n          case 8:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _addressToLatLng.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/pesiakovitz/goApps/src/restaurants/ui/src/utils/parser.js"],"names":["geocodeByAddress","getLatLng","geocode","parseData","data","Promise","all","map","restaurent","locationToAddress","Location","address","location","response","results","formatted_address","addressToLatLng","latLng","console","log","lat","lng"],"mappings":";;;;AAAA,SACEA,gBADF,EAEEC,SAFF,QAGO,2BAHP,C,CAKA;;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,gBAAsBC,SAAtB;AAAA;AAAA;;;;;2BAAO,kBAAyBC,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,8CACEC,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,GAAL;AAAA;AAAA;AAAA;AAAA;AAAA,uCAAS,iBAAOC,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCACvBA,UADuB;AAAA;AAAA,+BAEXC,iBAAiB,CAACD,UAAU,CAACE,QAAZ,CAFN;;AAAA;AAAA;AAAA;AAE1BC,0BAAAA,OAF0B;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAT;;AAAA;AAAA;AAAA;AAAA,gBAAZ,CADF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAOP,gBAAsBF,iBAAtB;AAAA;AAAA;;;;;2BAAO,kBAAiCG,QAAjC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,8CACEA,QADF;;AAAA;AAICC,YAAAA,QAJD;AAAA,8CAKEA,QAAQ,CAACC,OAAT,CAAiB,CAAjB,EAAoBC,iBALtB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAQP,gBAAsBC,eAAtB;AAAA;AAAA;;;;;2BAAO,kBAA+BL,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACiBX,gBAAgB,CAACW,OAAD,CADjC;;AAAA;AACCG,YAAAA,OADD;AAAA;AAAA,mBAEgBb,SAAS,CAACa,OAAO,CAAC,CAAD,CAAR,CAFzB;;AAAA;AAECG,YAAAA,MAFD;AAGLC,YAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,MAA1B;AAHK,wDAIKA,MAAM,CAACG,GAJZ,cAImBH,MAAM,CAACI,GAJ1B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import {\n  geocodeByAddress,\n  getLatLng,\n} from 'react-places-autocomplete';\n\n// const {google} = require('googleapis');\nimport geocode from 'react-geocode';\nexport async function parseData(data) {\n  return Promise.all(data.map(async (restaurent) =>({\n    ...restaurent,\n    address: await locationToAddress(restaurent.Location)\n  })));\n}\n\nexport async function locationToAddress(location) {\n  return location\n  console.log('llll',location)\n  const [lat, lng] = location.split('/', 2);\n  const response = await geocode.fromLatLng(parseFloat(lat), parseFloat(lng))\n  return response.results[0].formatted_address;\n}\n\nexport async function addressToLatLng(address) {\n  const results = await geocodeByAddress(address);\n  const latLng = await getLatLng(results[0]);\n  console.log('important:', latLng);\n  return `${latLng.lat}/${latLng.lng}`;\n}"]},"metadata":{},"sourceType":"module"}