{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _createClass = require(\"/Users/pesiakovitz/goApps/src/restaurants/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/pesiakovitz/goApps/src/restaurants/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar commentanalyzer_v1alpha1;\n\n(function (commentanalyzer_v1alpha1) {\n  /**\n   * Perspective Comment Analyzer API\n   *\n   * The Perspective Comment Analyzer API provides information about the potential impact of a comment on a conversation (e.g. it can provide a score for the &quot;toxicity&quot; of a comment). Users can leverage the &quot;SuggestCommentScore&quot; method to submit corrections to improve Perspective over time. Users can set the &quot;doNotStore&quot; flag to ensure that all submitted comments are automatically deleted after scores are returned.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const commentanalyzer = google.commentanalyzer('v1alpha1');\n   *\n   * @namespace commentanalyzer\n   * @type {Function}\n   * @version v1alpha1\n   * @variation v1alpha1\n   * @param {object=} options Options for Commentanalyzer\n   */\n  var Commentanalyzer = function Commentanalyzer(options, google) {\n    _classCallCheck(this, Commentanalyzer);\n\n    this.context = {\n      _options: options || {},\n      google: google\n    };\n    this.comments = new Resource$Comments(this.context);\n  };\n\n  commentanalyzer_v1alpha1.Commentanalyzer = Commentanalyzer;\n\n  var Resource$Comments =\n  /*#__PURE__*/\n  function () {\n    function Resource$Comments(context) {\n      _classCallCheck(this, Resource$Comments);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Comments, [{\n      key: \"analyze\",\n      value: function analyze(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://commentanalyzer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1alpha1/comments:analyze').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"suggestscore\",\n      value: function suggestscore(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://commentanalyzer.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1alpha1/comments:suggestscore').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Comments;\n  }();\n\n  commentanalyzer_v1alpha1.Resource$Comments = Resource$Comments;\n})(commentanalyzer_v1alpha1 = exports.commentanalyzer_v1alpha1 || (exports.commentanalyzer_v1alpha1 = {}));","map":null,"metadata":{},"sourceType":"script"}