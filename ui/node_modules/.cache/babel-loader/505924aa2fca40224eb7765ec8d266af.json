{"ast":null,"code":"import _classCallCheck from \"/Users/pesiakovitz/goApps/src/restaurants/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pesiakovitz/goApps/src/restaurants/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/pesiakovitz/goApps/src/restaurants/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/pesiakovitz/goApps/src/restaurants/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/pesiakovitz/goApps/src/restaurants/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/pesiakovitz/goApps/src/restaurants/ui/src/components/locationSearchInput.js\";\nimport React from 'react'; // import google from 'googleapis';\n\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\n\nvar LocationSearchInput =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(LocationSearchInput, _React$Component);\n\n  function LocationSearchInput(props) {\n    var _this;\n\n    _classCallCheck(this, LocationSearchInput);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LocationSearchInput).call(this, props));\n\n    _this.locationToAddress = function (location) {\n      return Promise.resolve('dffdf'); // const geocoder = new google.maps.Geocoder();\n      // const latlngStr = location.split(',', 2);\n      // const latlng = {lat: parseFloat(latlngStr[0]), lng: parseFloat(latlngStr[1])};\n      // return new Promise(function(resolve, reject) {\n      //   geocoder.geocode({'location': latlng}, function(results, status) {\n      //     if (status === 'OK') {\n      //       resolve(results[0].formatted_address);\n      //     } else {\n      //       reject(new Error(`Couldn't find the location for ${location}`));\n      //     }\n      //   })\n      // })\n    };\n\n    _this.handleChange = function (address) {\n      console.log('adress:', address);\n\n      _this.setState({\n        address: address\n      });\n    };\n\n    _this.handleSelect = function (address) {\n      geocodeByAddress(address).then(function (results) {\n        return getLatLng(results[0]);\n      }).then(function (latLng) {\n        console.log('result imporatant:', latLng);\n\n        _this.props.onLocationSelect(latLng);\n      });\n    };\n\n    _this.state = {\n      address: ''\n    };\n    return _this;\n  }\n\n  _createClass(LocationSearchInput, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.locationToAddress(this.props.location).then(function (address) {\n        return _this2.setState({\n          address: address\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(PlacesAutocomplete, {\n        value: this.state.address,\n        onChange: this.handleChange,\n        onSelect: this.handleSelect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, function (_ref) {\n        var getInputProps = _ref.getInputProps,\n            suggestions = _ref.suggestions,\n            getSuggestionItemProps = _ref.getSuggestionItemProps,\n            loading = _ref.loading;\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }, React.createElement(\"input\", Object.assign({}, getInputProps({\n          placeholder: 'Search Places ...',\n          className: 'location-search-input'\n        }), {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"autocomplete-dropdown-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }, loading && React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }, \"Loading...\"), suggestions.map(function (suggestion) {\n          var className = suggestion.active ? 'suggestion-item--active' : 'suggestion-item'; // inline style for demonstration purpose\n\n          var style = suggestion.active ? {\n            backgroundColor: '#fafafa',\n            cursor: 'pointer'\n          } : {\n            backgroundColor: '#ffffff',\n            cursor: 'pointer'\n          };\n          return React.createElement(\"div\", Object.assign({}, getSuggestionItemProps(suggestion, {\n            className: className,\n            style: style\n          }), {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 72\n            },\n            __self: this\n          }), React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 78\n            },\n            __self: this\n          }, suggestion.description));\n        })));\n      });\n    }\n  }]);\n\n  return LocationSearchInput;\n}(React.Component);\n\nexport default LocationSearchInput;","map":{"version":3,"sources":["/Users/pesiakovitz/goApps/src/restaurants/ui/src/components/locationSearchInput.js"],"names":["React","PlacesAutocomplete","geocodeByAddress","getLatLng","LocationSearchInput","props","locationToAddress","location","Promise","resolve","handleChange","address","console","log","setState","handleSelect","then","results","latLng","onLocationSelect","state","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","className","map","suggestion","active","style","backgroundColor","cursor","description","Component"],"mappings":"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","sourcesContent":["import React from 'react';\n// import google from 'googleapis';\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from 'react-places-autocomplete';\n \nclass LocationSearchInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { address: '' };\n  }\n\n  componentDidMount() {\n    this.locationToAddress(this.props.location)\n    .then((address) => this.setState({ address }));\n  }\n\n  locationToAddress = (location) => {\n    return Promise.resolve('dffdf');\n    // const geocoder = new google.maps.Geocoder();\n    // const latlngStr = location.split(',', 2);\n    // const latlng = {lat: parseFloat(latlngStr[0]), lng: parseFloat(latlngStr[1])};\n    // return new Promise(function(resolve, reject) {\n    //   geocoder.geocode({'location': latlng}, function(results, status) {\n    //     if (status === 'OK') {\n    //       resolve(results[0].formatted_address);\n    //     } else {\n    //       reject(new Error(`Couldn't find the location for ${location}`));\n    //     }\n    //   })\n    // })\n  }\n \n  handleChange = address => {\n    console.log('adress:', address);\n    this.setState({ address });\n  };\n \n  handleSelect = address => {\n    geocodeByAddress(address)\n      .then(results => getLatLng(results[0]))\n      .then(latLng =>{console.log('result imporatant:',latLng); this.props.onLocationSelect(latLng)})\n  };\n \n  render() {\n    return (\n      <PlacesAutocomplete\n        value={this.state.address}\n        onChange={this.handleChange}\n        onSelect={this.handleSelect}\n      >\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n          <div>\n            <input\n              {...getInputProps({\n                placeholder: 'Search Places ...',\n                className: 'location-search-input',\n              })}\n            />\n            <div className=\"autocomplete-dropdown-container\">\n              {loading && <div>Loading...</div>}\n              {suggestions.map(suggestion => {\n                const className = suggestion.active\n                  ? 'suggestion-item--active'\n                  : 'suggestion-item';\n                // inline style for demonstration purpose\n                const style = suggestion.active\n                  ? { backgroundColor: '#fafafa', cursor: 'pointer' }\n                  : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                return (\n                  <div\n                    {...getSuggestionItemProps(suggestion, {\n                      className,\n                      style,\n                    })}\n                  >\n                    <span>{suggestion.description}</span>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </PlacesAutocomplete>\n    );\n  }\n}\n\nexport default LocationSearchInput;"]},"metadata":{},"sourceType":"module"}