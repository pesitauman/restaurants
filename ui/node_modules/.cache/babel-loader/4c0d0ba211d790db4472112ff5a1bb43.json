{"ast":null,"code":"'use strict';\n\nvar utils = require('./../utils');\n\nvar transformData = require('./transformData');\n/**\n * Dispatch a request to the server using whichever adapter\n * is supported by the current environment.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\n\n\nmodule.exports = function dispatchRequest(config) {\n  // Ensure headers exist\n  config.headers = config.headers || {}; // Transform request data\n\n  config.data = transformData(config.data, config.headers, config.transformRequest); // Flatten headers\n\n  config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers || {});\n  utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {\n    delete config.headers[method];\n  });\n  var adapter;\n\n  if (typeof config.adapter === 'function') {\n    // For custom adapter support\n    adapter = config.adapter;\n  } else if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = require('../adapters/xhr');\n  } else if (typeof process !== 'undefined') {\n    // For node use HTTP adapter\n    adapter = require('../adapters/http');\n  }\n\n  return Promise.resolve(config) // Wrap synchronous adapter errors and pass configuration\n  .then(adapter).then(function onFulfilled(response) {\n    // Transform response data\n    response.data = transformData(response.data, response.headers, config.transformResponse);\n    return response;\n  }, function onRejected(error) {\n    // Transform response data\n    if (error && error.response) {\n      error.response.data = transformData(error.response.data, error.response.headers, config.transformResponse);\n    }\n\n    return Promise.reject(error);\n  });\n};","map":null,"metadata":{},"sourceType":"script"}