{"ast":null,"code":"export function locationToAddress(location) {\n  return Promise.resolve('dffdf'); // const geocoder = new google.maps.Geocoder();\n  // const latlngStr = location.split(',', 2);\n  // const latlng = {lat: parseFloat(latlngStr[0]), lng: parseFloat(latlngStr[1])};\n  // return new Promise(function(resolve, reject) {\n  //   geocoder.geocode({'location': latlng}, function(results, status) {\n  //     if (status === 'OK') {\n  //       resolve(results[0].formatted_address);\n  //     } else {\n  //       reject(new Error(`Couldn't find the location for ${location}`));\n  //     }\n  //   })\n  // })\n}","map":{"version":3,"sources":["/Users/pesiakovitz/goApps/src/restaurants/ui/src/utils/location.js"],"names":["locationToAddress","location","Promise","resolve"],"mappings":"AAAA,OAAO,SAASA,iBAAT,CAA2BC,QAA3B,EAAqC;AAC1C,SAAOC,OAAO,CAACC,OAAR,CAAgB,OAAhB,CAAP,CAD0C,CAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD","sourcesContent":["export function locationToAddress(location) {\n  return Promise.resolve('dffdf');\n  // const geocoder = new google.maps.Geocoder();\n  // const latlngStr = location.split(',', 2);\n  // const latlng = {lat: parseFloat(latlngStr[0]), lng: parseFloat(latlngStr[1])};\n  // return new Promise(function(resolve, reject) {\n  //   geocoder.geocode({'location': latlng}, function(results, status) {\n  //     if (status === 'OK') {\n  //       resolve(results[0].formatted_address);\n  //     } else {\n  //       reject(new Error(`Couldn't find the location for ${location}`));\n  //     }\n  //   })\n  // })\n}"]},"metadata":{},"sourceType":"module"}